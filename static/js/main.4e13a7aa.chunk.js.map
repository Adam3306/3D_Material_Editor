{"version":3,"sources":["components/common/Slider.js","App.2.js","utilities/constants.js","MaterialUI.js","components/Material/Material.js","App.2.Mesh.js","export.js","serviceWorker.js","index.js"],"names":["Slider","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","setState","value","refs","slider","onInputChange","textbox","state","react_default","a","createElement","className","style","display","flexDirection","justifyContent","fontSize","title","type","ref","size","height","max","step","width","min","class","id","React","Component","defaultProps","textures","options","label","MaterialItemUI","handleColorChange","color","event","material","console","log","rgb","pickedColor","BABYLON","Color3","r","g","b","setSpecularColor","ambientColor","setDiffuseColor","diffuseColor","setEmissiveColor","handleTextureSelectorChange","selectedOption","selectedTexture","textureMenuIsOpen","AddNewTexture","OnAddNewtexture","availableTextures","GetAvailableTextures","textureOptions","renderTextures","getActiveTextures","map","item","name","replace","padding","key","src","url","marginLeft","alt","href","onMouseUp","forceUpdate","specularColor","Vector3","emissiveColor","light","_this2","stlye","react_color_lib","onChangeComplete","disableAlpha","backgroundColor","borderRadius","textAlign","onClick","react_select_esm","menuIsOpen","PureComponent","MaterialItem","scene","setAlpha","alpha","setWireframe","wireframe","setPointsCloud","pointsCloud","setPointsSize","pointSize","setLight","val","light1","setEnabled","light2","textureKind","text","Texture","m_scene","removeTexture","texture","i","length","DirectionalLight","components","ret","_i","_textures","textureitem","push","StandardMaterial","Material","CreateSubMaterial","matitem_name","mat","subMaterials","AddMaterial","alert","newMat","RemoveMaterial","index","splice","pop","removeAllMaterial","MultiMaterial","MeshObject","applynewMaterial","tmp","m_obj","getMaterial","setMaterial","dispose","remove","createClass","babMesh","MeshCreator","arguments","undefined","Mesh","CreateBox","diameterTop","diameterBottom","tessellation","CreateCylinder","thickness","CreateTorus","radius","tube","radialSegments","tubularSegments","p","q","CreateTorusKnot","CreateDisc","segments","diameter","CreateSphere","exportObj","output","m","specularPower","toFixed","ambientTexture","diffuseTexture","specularTexture","bumpTexture","opacityTexture","join","dummyBool","App","m_peldamesh","m_axisNeed","rgbColor","materials","currSubMat","m_newMaterialName","uploadedMeshes","isOwnMesh","materialDetails","handleSelectionChange","_callee","regenerator_default","wrap","_context","prev","next","_this$state$selectedO","switchMesh","m_Scene","Create_Cylinder","CreatePolygon","uploadModel","stop","setMaterialItem","submat","addMaterial","toast","removeMaterial","mat_name","renderSelectedMaterial","renderListOfMaterials","onDoubleClick","onMouseDown","renderMeshSelect","optionsvec","toConsumableArray","fileUpload","click","uploadModelFile","e","target","files","FileList","file","reader","FileReader","onload","result","newmesh","ImportMesh","res","boundingInfo","getBoundingInfo","centerje","boundingBox","center","size_x","Math","abs","maximum","x","minimum","size_y","y","size_z","z","maxxja","c","scaling","position","exp","JSON","stringify","readAsText","renderADsdasda","placeholder","maxLength","newMatRef","onKeyDown","renderImagePicker","lib","extensions","dims","minWidth","maxWidth","minHeight","maxHeight","base64","onError","errMsg","renderExport","onPointerDown","download","renderUploadModel","accept","renderPointsSizeSlider","sdasda","components_common_Slider","renderSlidersAndButtons","lightText","wireText","pointsText","configure","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","m_Canvas","document","getElementById","window","innerHeight","innerWidth","m_Engine","createScene","EnAssetManagerem","onFinish","onTaskError","setInterval","render","engine","canvas","scenecreatorfunc","camera","Zero","attachControl","onViewMatrixChangedObservable","add","GetObjMatSpec","MaterialUI","Boolean","location","hostname","match","ReactDOM","App_2","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4e13a7aa.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Slider.css\";\r\n\r\nclass Slider extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: props.value,\r\n    };\r\n  }\r\n\r\n  onChange = () => {\r\n    this.setState({ value: this.refs.slider.value });\r\n    this.props.onChange(this.refs.slider.value);\r\n  };\r\n\r\n  onInputChange = () => {\r\n    this.setState({ value: this.refs.textbox.value });\r\n    this.props.onChange(this.refs.slider.value);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"slidecontainer\">\r\n        <div className=\"container\">\r\n          <div style={{  display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\"}}>\r\n          <p style={{fontSize: 12}}>{this.props.title}</p>\r\n\r\n          <input\r\n            type=\"text\"\r\n            value={this.state.value}\r\n            onChange={this.onInputChange}\r\n            ref=\"textbox\"\r\n            size={this.props.size}\r\n            height={3}\r\n            max={this.props.max}\r\n            step=\"0.0001\"\r\n            style={{width: 50}}\r\n          />\r\n          </div>\r\n        \r\n\r\n        <input\r\n          ref=\"slider\"\r\n          type=\"range\"\r\n          min={this.props.min}\r\n          max={this.props.max}\r\n          value={this.state.value}\r\n          class=\"slider\"\r\n          id=\"myRange\"\r\n          step=\"0.0001\"\r\n          onChange={this.onChange}\r\n          style={{height: 8}}\r\n        />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nSlider.defaultProps = {\r\n  value: 0,\r\n  min: 0,\r\n  max: 100,\r\n  size: 4,\r\n  title: \"Title\",\r\n};\r\n\r\nexport default Slider;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport * as BABYLON from \"babylonjs\";\r\nimport Slider from \"./components/common/Slider\";\r\nimport \"babylonjs-loaders\";\r\nimport { ImagePicker } from \"react-file-picker\";\r\nimport Select from \"react-select\";\r\nimport Collapsible from \"react-collapsible\";\r\nimport { options } from \"./utilities/constants\";\r\nimport \"babylonjs-serializers\";\r\nimport download from \"downloadjs\";\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport MaterialItemUI from \"./MaterialUI\";\r\nimport \"./App.css\";\r\nimport Material from \"../src/components/Material/Material\";\r\nimport { MeshObject, MeshCreator } from \"./App.2.Mesh\";\r\n\r\n// import {OBJExport} from \"./export.ts\"\r\nimport { exportObj } from \"./export\";\r\n\r\n//TODO: remove material\r\n\r\nvar textures;\r\nvar dummyBool = false;\r\n\r\nclass App extends Component {\r\n  state = {\r\n    m_peldamesh: new MeshObject(),\r\n    selectedOption: options[0],\r\n    m_axisNeed: true,\r\n    rgbColor: new BABYLON.Vector3(1, 0, 0),\r\n    materials: [],\r\n    currSubMat: null,\r\n    m_newMaterialName: \"\",\r\n    uploadedMeshes: [],\r\n    isOwnMesh: false,\r\n    light: false,\r\n    materialDetails: \"\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    \r\n    toast.configure(\r\n    {\r\n      position: \"top-center\",\r\n      autoClose: 5000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n    }\r\n    );\r\n    this.m_Canvas = document.getElementById(\"rendercanvas\");\r\n    this.m_Canvas.height = window.innerHeight;\r\n    this.m_Canvas.width = window.innerWidth / 2;\r\n    this.m_Engine = new BABYLON.Engine(this.m_Canvas);\r\n    this.m_Scene = this.createScene(this.m_Engine, this.m_Canvas);\r\n    this.m_Scene.EnAssetManagerem = new BABYLON.AssetsManager(this.m_Scene);\r\n    this.m_Scene.EnAssetManagerem.onFinish = this.onFinish;\r\n    this.m_Scene.EnAssetManagerem.onTaskError = this.onTaskError;\r\n\r\n    this.state.m_peldamesh.switchMesh(\r\n      MeshCreator.CreateBox(this.m_Scene),\r\n      this.m_Scene\r\n    );\r\n\r\n    setInterval(() => {\r\n      this.m_Scene.render();\r\n    }, 100);\r\n\r\n    this.forceUpdate();\r\n  }\r\n\r\n  createScene(engine, canvas, scenecreatorfunc) {\r\n    var scene = null;\r\n\r\n    if (scenecreatorfunc == undefined) {\r\n      scene = new BABYLON.Scene(engine);\r\n    } else {\r\n      this.m_Scene.dispose();\r\n      scene = this.scenecreatorfunc();\r\n    }\r\n\r\n    var camera = new BABYLON.ArcRotateCamera(\r\n      \"Camera\",\r\n      -4,\r\n      0.8,\r\n      40,\r\n      new BABYLON.Vector3.Zero(),\r\n      scene\r\n    );\r\n\r\n    camera.attachControl(canvas, true);\r\n\r\n    camera.onViewMatrixChangedObservable.add(() => {\r\n      scene.render();\r\n    });\r\n\r\n    this.m_Scene = scene;\r\n    return scene;\r\n  }\r\n\r\n  /*remove = () => {\r\n    if (this.state.m_peldamesh != null) {\r\n      this.state.m_peldamesh.remove();\r\n      //   this.state.currSubMat.delete();\r\n      this.setState({ m_peldamesh: null, currSubMat: null });\r\n    } else {\r\n      // TODO: alert\r\n    }\r\n  };*/\r\n\r\n  handleSelectionChange = async selectedOption => {\r\n    this.setState({ selectedOption }, () => {\r\n      const { value, label } = this.state.selectedOption;\r\n      if (this.state.isOwnMesh) {\r\n        this.setState({ isOwnMesh: false });\r\n        this.state.m_peldamesh.dispose();\r\n        this.state.m_peldamesh = new MeshObject();\r\n      }\r\n\r\n      switch (value) {\r\n        case \"box\":\r\n          this.state.m_peldamesh = new MeshObject();\r\n          this.state.m_peldamesh.switchMesh(\r\n            MeshCreator.CreateBox(this.m_Scene),\r\n            this.m_Scene\r\n          );\r\n          break;\r\n        case \"cylinder\":\r\n          this.state.m_peldamesh.switchMesh(\r\n            MeshCreator.Create_Cylinder(this.m_Scene),\r\n            this.m_Scene\r\n          );\r\n          break;\r\n        case \"torus\":\r\n          this.state.m_peldamesh.switchMesh(\r\n            MeshCreator.CreateTorus(\"torus\", 2.0, this.m_Scene),\r\n            this.m_Scene\r\n          );\r\n          break;\r\n        case \"torusknot\":\r\n          this.state.m_peldamesh.switchMesh(\r\n            MeshCreator.CreateTorusKnot(\r\n              \"torusknot\",\r\n              2.0,\r\n              0.5,\r\n              100.0,\r\n              100.0,\r\n              2.0,\r\n              3.0,\r\n              this.m_Scene\r\n            ),\r\n            this.m_Scene\r\n          );\r\n          break;\r\n        case \"polygon\":\r\n          this.state.m_peldamesh.switchMesh(\r\n            MeshCreator.CreatePolygon(\"polygon\", 2.0, this.m_Scene),\r\n            this.m_Scene\r\n          );\r\n          break;\r\n        case \"sphere\":\r\n          this.state.m_peldamesh.switchMesh(\r\n            MeshCreator.CreateSphere(\"sphere\", 100.0, 10.0, this.m_Scene),\r\n            this.m_Scene\r\n          );\r\n          break;\r\n        case \"NewMesh\":\r\n          {\r\n            if (!this.state.isOwnMesh) \r\n            {\r\n              this.state.m_peldamesh.remove();\r\n            }\r\n            this.uploadModel();\r\n          }\r\n          break;\r\n        default: {\r\n          alert(\"Varatlan hiba select!\");\r\n          break;\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  setMaterialItem = name => {\r\n    if (this.state.isOwnMesh == true) {\r\n      for (\r\n        var i = 0;\r\n        i < this.state.m_peldamesh.material.subMaterials.length;\r\n        i++\r\n      ) {\r\n        var submat = this.state.m_peldamesh.material.subMaterials[i];\r\n        if (submat.name == name) {\r\n          let tmp = this.state.m_peldamesh.material.subMaterials[0];\r\n          this.state.m_peldamesh.material.subMaterials[0] = submat;\r\n          this.state.m_peldamesh.material.subMaterials[i] = tmp;\r\n          this.setState({ currSubMat: submat });\r\n        }\r\n      }\r\n    } else {\r\n      for (\r\n        var i = 0;\r\n        i < this.state.m_peldamesh.m_obj.material.subMaterials.length;\r\n        i++\r\n      ) {\r\n        var submat = this.state.m_peldamesh.m_obj.material.subMaterials[i];\r\n        if (submat.name == name) {\r\n          this.setState({ currSubMat: submat });\r\n          this.state.m_peldamesh.applynewMaterial(submat, i);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  addMaterial = () => {\r\n    var sdasda = this.state;\r\n\r\n    if (this.state.isOwnMesh == true) {\r\n      let newMat = this.state.m_peldamesh.material.AddMaterial(\r\n        this.state.m_newMaterialName,\r\n        this.m_Scene\r\n      );\r\n      this.setState({ m_newMaterialName: \"\", currSubMat: newMat });\r\n      this.forceUpdate();\r\n      this.setMaterialItem(newMat.name);\r\n    } else if (this.state.m_newMaterialName.length > 0) {\r\n      let newMat = this.state.m_peldamesh.m_obj.material.AddMaterial(\r\n        this.state.m_newMaterialName,\r\n        this.m_Scene\r\n      );\r\n      this.setState({ m_newMaterialName: \"\", currSubMat: newMat });\r\n      this.forceUpdate();\r\n      this.setMaterialItem(newMat.name);\r\n    } \r\n    else \r\n    {\r\n      // alert(\"adjon meg nevet\");\r\n      toast(\"Add name to material!\");\r\n    }\r\n  };\r\n\r\n  removeMaterial = mat_name => {\r\n    if (mat_name) {\r\n      this.state.m_peldamesh.m_obj.material.RemoveMaterial(\r\n        mat_name,\r\n        this.m_Scene\r\n      );\r\n    } else {\r\n      this.state.m_peldamesh.m_obj.material.RemoveMaterial(\"\", this.m_Scene);\r\n    }\r\n\r\n    this.setState({ currSubMat: null });\r\n    this.forceUpdate();\r\n  };\r\n\r\n  renderSelectedMaterial = () => {\r\n    return this.state.currSubMat ? (\r\n      <div>\r\n        <div className=\"selectSelectedStyle\">Selected material: </div>{\" \"}\r\n        {this.state.currSubMat.name}\r\n      </div>\r\n    ) : (\r\n      <div>\r\n        <div className=\"selectSelectedStyle\">Select material!</div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  renderListOfMaterials = () => {\r\n    let materials;\r\n    if (\r\n      this.state.m_peldamesh &&\r\n      (this.state.m_peldamesh.m_obj || this.state.isOwnMesh)\r\n    ) {\r\n      let tmpArr = this.state.isOwnMesh\r\n        ? this.state.m_peldamesh.material.subMaterials\r\n        : this.state.m_peldamesh.m_obj.material.subMaterials;\r\n      materials = tmpArr.map(mat => {\r\n        return (\r\n          <li\r\n            className=\"title\"\r\n            onClick={() => this.setMaterialItem(mat.name)}\r\n            name={mat.name}\r\n            key={mat.name}\r\n            // onMouseOver={() => alert(mat.name)}\r\n          >\r\n            <div onDoubleClick={() => alert(mat.name)}>{mat.name}</div>\r\n            <a\r\n              className=\"deleteMat\"\r\n              href=\"#\"\r\n              onMouseDown={() => this.removeMaterial(mat.name)}\r\n            >\r\n              ✖\r\n            </a>\r\n          </li>\r\n        );\r\n      });\r\n    }\r\n    return materials;\r\n  };\r\n\r\n  renderMeshSelect = () => {\r\n    var optionsvec = [...options];\r\n    for (var i = 0; i < this.state.uploadedMeshes.length; i++) {\r\n      optionsvec.push({\r\n        value: \"val//_\" + this.state.uploadedMeshes[i].name,\r\n        label: this.state.uploadedMeshes[i].name\r\n      });\r\n    }\r\n\r\n    optionsvec.push({ value: \"NewMesh\", label: \"Upload new mesh\" });\r\n\r\n    return (\r\n      <div className=\"meshSelect\">\r\n        <div className=\"meshSelectStyle\">\r\n          <div>Select a Mesh</div>\r\n        </div>\r\n        <div className=\"meshSelectDropDownStyle\">\r\n          <Select\r\n            value={this.state.selectedOption}\r\n            onChange={this.handleSelectionChange}\r\n            options={optionsvec}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  renderTextures = () => {\r\n    if (this.state.currSubMat) {\r\n      textures = this.state.currSubMat.components.map(textureitem => {\r\n        return (\r\n          <div className=\"textureTitle\" style={{ padding: \"15px\" }}>\r\n            {textureitem}\r\n            <img src={textureitem.url} width={\"20\"} height={\"20\"} />\r\n            <a className=\"deleteTexture\" href=\"\" onMouseDown={() => {}}>\r\n              ✖\r\n            </a>\r\n          </div>\r\n        );\r\n      });\r\n    }\r\n    return textures;\r\n  };\r\n\r\n  GetValue() {\r\n    if (this.state.currSubMat) {\r\n      return this.state.currSubMat.GetObjMatSpec();\r\n    }\r\n\r\n    return \"No obj material\";\r\n  }\r\n\r\n  uploadModel = () => {\r\n    this.refs.fileUpload.click();\r\n  };\r\n\r\n  uploadModelFile = e => {\r\n    console.log(e);\r\n\r\n    if (!(e.target.files instanceof FileList)) {\r\n      return;\r\n    }\r\n\r\n    var file = e.target.files[0];\r\n\r\n    var reader = new FileReader();\r\n    reader.onload = () => {\r\n      var text = reader.result;\r\n\r\n      try {\r\n        let newmesh = BABYLON.SceneLoader.ImportMesh(\r\n          \"\",\r\n          \"\",\r\n          \"data:\" + text,\r\n          this.m_Scene,\r\n          res => {\r\n            res = res[0];\r\n            var boundingInfo = res.getBoundingInfo();\r\n\r\n            var centerje = boundingInfo.boundingBox.center;\r\n            var size_x =\r\n              Math.abs(boundingInfo.maximum.x) +\r\n              Math.abs(boundingInfo.minimum.x);\r\n            var size_y =\r\n              Math.abs(boundingInfo.maximum.y) +\r\n              Math.abs(boundingInfo.minimum.y);\r\n            var size_z =\r\n              Math.abs(boundingInfo.maximum.z) +\r\n              Math.abs(boundingInfo.minimum.z);\r\n            debugger;\r\n            var maxxja = Math.max(size_x, size_y, size_z);\r\n            var minje = Math.min(size_x, size_y, size_z);\r\n            if (maxxja < 10.0) {\r\n              var c = 10.0 / maxxja;\r\n              res.scaling = new BABYLON.Vector3(c, c, c);\r\n            }\r\n\r\n            if (maxxja > 1000.0) {\r\n              res.scaling = new BABYLON.Vector3(0.5, 0.5, 0.5);\r\n            }\r\n\r\n            res.position = new BABYLON.Vector3(\r\n              -centerje.x,\r\n              -centerje.y,\r\n              -centerje.z\r\n            );\r\n            res.material = new Material(this.m_Scene);\r\n            res.material.CreateSubMaterial(\"default material\", this.m_Scene);\r\n            this.setState({\r\n              m_peldamesh: res,\r\n              isOwnMesh: true,\r\n              currSubMat: res.material.subMaterials[0]\r\n            });\r\n          },\r\n          res => {\r\n            console.log(\"progress: \", res);\r\n          },\r\n          res => {\r\n            alert(\"Varatlan hiba betoltes\");\r\n            console.log(\"err res: \", res);\r\n          },\r\n          \".obj\"\r\n        );\r\n\r\n        console.log(newmesh);\r\n      } catch (exp) {\r\n        alert(\"error\", JSON.stringify(exp));\r\n        console.log(\"err: \", exp);\r\n      }\r\n    };\r\n    reader.readAsText(file);\r\n  };\r\n\r\n  renderADsdasda = () => {\r\n    var materials = this.renderListOfMaterials();\r\n    return (\r\n      <div>\r\n        <ul id=\"materialList\">{materials}</ul>\r\n        <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n          <input\r\n            ref=\"newMatRef\"\r\n            type=\"text\"\r\n            value={this.state.m_newMaterialName}\r\n            placeholder=\"Enter your material name\"\r\n            maxLength={20}\r\n            onChange={() =>this.setState({ m_newMaterialName: this.refs.newMatRef.value })}\r\n            onKeyDown={\r\n                e =>\r\n                {\r\n                  if (e.key === 'Enter') \r\n                  {\r\n                    this.addMaterial()\r\n                  }\r\n                }\r\n              }\r\n          />\r\n          <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n            <button\r\n              style={{\r\n                backgroundColor: \"white\",\r\n                borderRadius: 4,\r\n                textAlign: \"center\"\r\n              }}\r\n              ref=\"addMaterial\"\r\n              onMouseDown={() => this.addMaterial()}\r\n            >\r\n              Add material\r\n            </button>\r\n            <button\r\n              style={{\r\n                backgroundColor: \"white\",\r\n                borderRadius: 4,\r\n                textAlign: \"center\"\r\n              }}\r\n              onMouseDown={() => this.removeMaterial()}\r\n            >\r\n              Remove last material\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  renderImagePicker = () => {\r\n    return (\r\n      <div style={{ display: \"none\" }}>\r\n        <ImagePicker\r\n          extensions={[\"jpg\", \"jpeg\", \"png\"]}\r\n          dims={{\r\n            minWidth: 100,\r\n            maxWidth: 500,\r\n            minHeight: 100,\r\n            maxHeight: 500\r\n          }}\r\n          onChange={base64 => console.log(base64)}\r\n          onError={errMsg => console.log(errMsg)}\r\n        >\r\n          <button\r\n            style={{\r\n              backgroundColor: \"white\",\r\n              borderRadius: 4,\r\n              textAlign: \"center\"\r\n            }}\r\n            ref={\"ImagePickerRef\"}\r\n          >\r\n            Click to add texture\r\n          </button>\r\n        </ImagePicker>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  renderExport = () => {\r\n    return (\r\n      <button\r\n        style={{\r\n          backgroundColor: \"white\",\r\n          borderRadius: 4,\r\n          textAlign: \"center\",\r\n          marginLeft: 30\r\n        }}\r\n        onPointerDown={() => {\r\n          var mat = this.state.isOwnMesh\r\n            ? this.state.m_peldamesh.material.subMaterials[0]\r\n            : this.state.m_peldamesh.m_obj.material.subMaterials[0];\r\n          var text = exportObj(mat);\r\n          download(text, \"material.mtl\");\r\n        }}\r\n      >\r\n        Export material\r\n      </button>\r\n    );\r\n  };\r\n\r\n  renderUploadModel = () => {\r\n    return (\r\n      <div>\r\n        <button\r\n          style={{\r\n            backgroundColor: \"white\",\r\n            borderRadius: 4,\r\n            textAlign: \"center\"\r\n          }}\r\n          onPointerDown={() => {\r\n            this.uploadModel();\r\n          }}\r\n        >\r\n          upload model\r\n        </button>\r\n        <input\r\n          type=\"file\"\r\n          style={{ display: \"none\" }}\r\n          ref=\"fileUpload\"\r\n          onChange={this.uploadModelFile}\r\n          accept=\".babylon,.obj,.txt\"\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  renderPointsSizeSlider = () => {\r\n    let sdasda =\r\n      this.state.currSubMat && this.state.currSubMat.pointsCloud ? (\r\n        <Slider\r\n          min={0.0}\r\n          max={100}\r\n          value={this.state.currSubMat.pointSize}\r\n          onChange={val => {\r\n            this.state.currSubMat.setPointsSize(val);\r\n          }}\r\n          title=\"Points size\"\r\n        />\r\n      ) : null;\r\n    return (\r\n      this.state.currSubMat && (\r\n        <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n          {sdasda}\r\n          <Slider\r\n            min={0.0}\r\n            max={1.0}\r\n            value={this.state.currSubMat ? this.state.currSubMat.alpha : 1.0}\r\n            onChange={val => {\r\n              console.log(val);\r\n              if (this.state.currSubMat) {\r\n                console.log(this.state.currSubMat)\r\n                this.state.currSubMat.setAlpha(val);\r\n              }\r\n            }}\r\n            title=\"Alpha\"\r\n          />\r\n        </div>\r\n      )\r\n    );\r\n  };\r\n\r\n  renderSlidersAndButtons = () => {\r\n    if (this.state.currSubMat)\r\n    {\r\n      let lightText = !dummyBool ? \"Disable light\" : \"Enable light\";\r\n      let wireText = this.state.currSubMat.wireframe ? \"Set wireframe off\" : \"Set wireframe on\";\r\n      let pointsText = this.state.currSubMat.pointsCloud ? \"Set pointscloud off\" : \"Set pointscloud on\";\r\n      return (\r\n        this.state.currSubMat && (\r\n          <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n            <button\r\n              style={{\r\n                backgroundColor: \"white\",\r\n                borderRadius: 4,\r\n\r\n                textAlign: \"center\"\r\n              }}\r\n                onPointerDown={() => \r\n                  {\r\n                    this.state.currSubMat.setWireframe()\r\n                    this.forceUpdate()\r\n                  }\r\n              }\r\n            >\r\n              {wireText} \r\n            </button>\r\n            <button\r\n              style={{\r\n                backgroundColor: \"white\",\r\n                borderRadius: 4,\r\n                textAlign: \"center\"\r\n              }}\r\n              onPointerDown={() => {\r\n                this.state.currSubMat.setLight(dummyBool);\r\n                dummyBool = !dummyBool;\r\n                this.forceUpdate();\r\n              }}\r\n            >\r\n              {lightText}\r\n            </button>\r\n            <button\r\n              style={{\r\n                backgroundColor: \"white\",\r\n                borderRadius: 4,\r\n                textAlign: \"center\"\r\n              }}\r\n              onPointerDown={() => {\r\n                this.state.currSubMat.setPointsCloud();\r\n                this.forceUpdate();\r\n              }}\r\n            >\r\n              {pointsText}\r\n            </button>\r\n\r\n            {/* // {this.renderPointsSizeSlider()} */}\r\n          </div>\r\n        )\r\n      );\r\n    }\r\n  };\r\n\r\n  \r\n\r\n  render() {\r\n    // textures = this.renderTextures();\r\n    \r\n    return (\r\n      <div className=\"App\">\r\n        {/* <canvas id=\"rendercanvas\" width=\"50%\" height=\"100%\" className=\"renderCanvas\" /> */}\r\n        <div className=\"editorContainer\">\r\n          {this.renderMeshSelect()}\r\n          <div className=\"uploadModelStyle\" />\r\n          <input\r\n            type=\"file\"\r\n            style={{ display: \"none\" }}\r\n            ref=\"fileUpload\"\r\n            onChange={this.uploadModelFile}\r\n          />\r\n          <div className=\"mSmPStyle\">\r\n            <div>\r\n              {this.renderSelectedMaterial()}\r\n\r\n              {this.renderADsdasda()}\r\n              {/* {this.renderUploadModel()} */}\r\n            </div>\r\n\r\n            <div\r\n              style={{ display: \"flex\", flexDirection: \"column\", padding: 15 }}\r\n            >\r\n              <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                <div className=\"materialPropertiesStyle\">\r\n                  Material Properties\r\n                </div>\r\n                {this.renderExport()}\r\n              </div>\r\n              <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                {this.renderImagePicker()}\r\n\r\n                <div style={{ padding: 15 }}>\r\n                  {this.renderSlidersAndButtons()}\r\n                </div>\r\n                <div style={{ padding: 15 }}>\r\n                  {this.renderPointsSizeSlider()}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <MaterialItemUI material={this.state.currSubMat} />\r\n          {/* <div style={{ display: \"flex\", flexDirection: \"column\" }}> */}\r\n\r\n          {/* </div> */}\r\n        </div>\r\n        <canvas\r\n          id=\"rendercanvas\"\r\n          width=\"50%\"\r\n          height=\"100%\"\r\n          className=\"renderCanvas\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","export const WIREFRAME = \"wireframe\";\r\nexport const DISABLE_LIGHTNING = \"disableLighting\";\r\nexport const POINTS_CLOUD = \"pointsCloud\";\r\n\r\nexport const options = [\r\n  { value: \"box\", label: \"Box\" },\r\n  { value: \"cylinder\", label: \"Cylinder\" },\r\n  { value: \"torus\", label: \"Torus\" },\r\n  { value: \"torusknot\", label: \"Torusknot\" },\r\n  { value: \"polygon\", label: \"Polygon\" },\r\n  { value: \"sphere\", label: \"Sphere\" },\r\n  // { value: \"plane\", label: \"Plane\" },\r\n\r\n  \r\n];\r\n","import React from \"react\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport BABYLON from \"babylonjs\";\r\nimport Select from \"react-select\";\r\nimport \"./App.css\";\r\n\r\nclass MaterialItemUI extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    {\r\n    }\r\n    this.state = {\r\n      color: this.props.material\r\n        ? this.props.material.specularColor\r\n        : BABYLON.Vector3(1, 0, 1),\r\n      ambientColor: this.props.material\r\n        ? this.props.material.diffuseColor\r\n        : BABYLON.Vector3(1, 0, 1),\r\n      diffuseColor: this.props.material\r\n        ? this.props.material.emissiveColor\r\n        : BABYLON.Vector3(1, 0, 1),\r\n      textureOptions: [],\r\n      selectedTexture: null,\r\n      textureMenuIsOpen: false,\r\n      light: false\r\n    };\r\n  }\r\n\r\n  handleColorChange = (color, event, state) => {\r\n    if (this.props.material) {\r\n      console.log(color.rgb);\r\n      let pickedColor = new BABYLON.Color3(\r\n        color.rgb.r / 255.0,\r\n        color.rgb.g / 255.0,\r\n        color.rgb.b / 255.0\r\n      );\r\n\r\n      if (state === \"ambientColor\") {\r\n        this.props.material.setSpecularColor(pickedColor);\r\n        this.setState({ ambientColor: color.rgb });\r\n      } else if (state === \"diffuseColor\") {\r\n        this.props.material.setDiffuseColor(pickedColor);\r\n        this.setState({ diffuseColor: color.rgb });\r\n      } else {\r\n        this.setState({ color: color.rgb });\r\n        this.props.material.setEmissiveColor(pickedColor);\r\n      }\r\n    }\r\n  };\r\n\r\n  handleTextureSelectorChange = selectedOption => {\r\n    this.setState({\r\n      selectedTexture: selectedOption,\r\n      textureMenuIsOpen: false\r\n    });\r\n    this.props.material.AddNewTexture(selectedOption.value);\r\n  };\r\n\r\n  OnAddNewtexture = () => {\r\n    var availableTextures = this.props.material.GetAvailableTextures();\r\n    this.setState({\r\n      textureOptions: availableTextures,\r\n      textureMenuIsOpen: true\r\n    });\r\n    // this.refs.textureSelect.click();\r\n    // this.refs.ImagePickerRef.click();\r\n  };\r\n\r\n  renderTextures = () =>\r\n  {\r\n    let tempArr = this.props.material.getActiveTextures();\r\n    let ret = tempArr.map(item => {\r\n      let name = item.name.replace('textures/','').replace('.jpg','');\r\n      return (\r\n        <div\r\n          className=\"textureTitle\"\r\n          style={{ padding: \"15px\" }}\r\n          key={item}\r\n      >\r\n        {name}\r\n        <img\r\n          src={item.url}\r\n          width={\"20\"}\r\n          height={\"20\"}\r\n          style={{ marginLeft: 15 }}\r\n          alt={item.name}\r\n        />\r\n        <a\r\n          className=\"deleteTexture\"\r\n          href=\"#\"\r\n          onMouseUp={() => {\r\n            this.props.material[name] = null;\r\n            this.forceUpdate();\r\n            console.log(this.props.material.getActiveTextures())\r\n          }}\r\n        >\r\n          ✖\r\n        </a>\r\n      </div>\r\n      )\r\n    })\r\n\r\n    return ret;\r\n  }\r\n\r\n  render() {\r\n    return this.props.material ? (\r\n      <div>\r\n        <div className=\"mSmPStyle\">\r\n          <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n            <div className=\"colorPickerContainer\">\r\n              <div className=\"Colors\">\r\n                <div stlye={{ padding: \"10px\" }}>Diffuse color</div>\r\n              </div>\r\n              <SketchPicker\r\n                color={this.state.ambientColor}\r\n                onChangeComplete={(color, event) =>\r\n                  this.handleColorChange(color, event, \"ambientColor\")\r\n                }\r\n                disableAlpha\r\n              />\r\n            </div>\r\n            <div className=\"colorPickerContainer\">\r\n              <div className=\"Colors\">\r\n                <div stlye={{ padding: \"10px\" }}>Emissive color</div>\r\n              </div>\r\n              <SketchPicker\r\n                color={this.state.diffuseColor}\r\n                onChangeComplete={(color, event) =>\r\n                  this.handleColorChange(color, event, \"diffuseColor\")\r\n                }\r\n                disableAlpha\r\n              />\r\n            </div>\r\n            <div className=\"colorPickerContainer\">\r\n              <div className=\"Colors\">\r\n                <div stlye={{ padding: \"10px\" }}>Specular color</div>\r\n              </div>\r\n              <SketchPicker\r\n                color={this.state.color}\r\n                onChangeComplete={(color, event) =>\r\n                  this.handleColorChange(color, event, \"color\")\r\n                }\r\n                disableAlpha\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <button\r\n            style={{\r\n              backgroundColor: \"white\",\r\n              borderRadius: 4,\r\n              textAlign: \"center\"\r\n            }}\r\n            onClick={this.OnAddNewtexture}\r\n          >\r\n            Click to add texture\r\n          </button>\r\n          <Select\r\n            //value={this.state.selectedTexture}\r\n            onChange={this.handleTextureSelectorChange}\r\n            options={this.state.textureOptions}\r\n            ref=\"textureSelect\"\r\n            menuIsOpen={this.state.textureMenuIsOpen}\r\n          />\r\n          \r\n          {this.renderTextures()}\r\n\r\n          {/* <button style={{    backgroundColor: white,\r\n    borderRadius: 4,\r\n    textAlign: center,\r\n    \r\n  }} > onPointerDown={() => this.props.material.setTexture()}>add texture</button> */}\r\n        </div>\r\n      </div>\r\n    ) : null;\r\n  }\r\n}\r\n\r\nexport default MaterialItemUI;\r\n","import BABYLON from \"babylonjs\";\r\nimport React from \"react\";\r\nimport \"./Material.css\";\r\n\r\nvar textures = [\r\n  \"diffuseTexture\",\r\n  \"reflectionTexture\",\r\n  \"opacityTexture\",\r\n  \"lightmapTexture\",\r\n  \"emissiveTexture\",\r\n  \"ambientTexture\",\r\n  \"bumpTexture\"\r\n];\r\n\r\nclass MaterialItem extends BABYLON.StandardMaterial {\r\n  constructor(name, scene) {\r\n    super(name, scene);\r\n\r\n    console.log(\"idaig\", name, scene);\r\n    this.light1 = new BABYLON.DirectionalLight(\r\n      \"DirectionalLight\",\r\n      new BABYLON.Vector3(1, 1, 1),\r\n      scene\r\n    );\r\n\r\n    this.light2 = new BABYLON.DirectionalLight(\r\n      \"DirectionalLight\",\r\n      new BABYLON.Vector3(-1, -1, -1),\r\n      scene\r\n    );\r\n    this.m_scene = scene;\r\n    this.components = [];\r\n  }\r\n\r\n  setAlpha = value => {\r\n    // console.log(\"setAlpha \", value);\r\n    this.alpha = value;\r\n  };\r\n\r\n  setDiffuseColor = color => {\r\n    // console.log(\"setDiffuseColor \", color, this.diffuseColor);\r\n    this.diffuseColor = color;\r\n  };\r\n\r\n  setSpecularColor = color => {\r\n    this.specularColor = color;\r\n  };\r\n\r\n  setEmissiveColor = color => {\r\n    this.emissiveColor = color;\r\n  };\r\n\r\n  setWireframe = () => {\r\n    this.wireframe = !this.wireframe;\r\n  };\r\n\r\n  setPointsCloud = () => {\r\n    this.pointsCloud = !this.pointsCloud;\r\n  };\r\n\r\n  setPointsSize = size => {\r\n    // console.log(\"setpointsize: \", size, \" \", this.pointSize);\r\n    this.pointSize = size;\r\n  };\r\n\r\n  setLight = val => {\r\n    this.light1.setEnabled(val);\r\n    this.light2.setEnabled(val);\r\n  };\r\n\r\n  AddNewTexture = textureKind => {\r\n    //    Creation of a repeated textured material\r\n\r\n    // this.reflectionTexture= text;\r\n    // this.opacityTexture = text;\r\n    // this.lightmapTexture = text;\r\n    // this.emissiveTexture = text;\r\n    // this.ambientTexture = text;\r\n    // this.bumpTexture = text;\r\n    if (this[textureKind] == null) {\r\n      let text = new BABYLON.Texture(\r\n        \"textures/\" + textureKind + \".jpg\",\r\n        this.m_scene\r\n      );\r\n      this[textureKind] = text;\r\n    }\r\n\r\n    // this.projectionTexture = text;\r\n    // this.backFaceCulling = true;\r\n  };\r\n\r\n  removeTexture = texture => {\r\n    let index;\r\n    for (let i = 0; i < this.textures.length; i++) {\r\n      if (textures[i] == texture) {\r\n        index = i;\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  GetAvailableTextures() {\r\n    var ret = [];\r\n    for (let textureitem of textures) {\r\n      if (this[textureitem] == null)\r\n        ret.push({ value: textureitem, label: textureitem });\r\n    }\r\n\r\n    return ret;\r\n  }\r\n\r\n  GetObjMatSpec() {\r\n    return (\r\n      \"newmtl my_mtl\" +\r\n      \"\\r\\nKa 0.0435 0.0435 0.0435\" +\r\n      \"\\r\\nKd 0.1086 0.1086 0.1086\" +\r\n      \"\\r\\nKs 0.0000 0.0000 0.0000\" +\r\n      \"\\r\\nTf 0.9885 0.9885 0.9885\" +\r\n      \"\\r\\nillum 6\" +\r\n      \"\\r\\nd -halo 0.6600\" +\r\n      \"\\r\\nNs 10.0000\" +\r\n      \"\\r\\nsharpness 60\" +\r\n      \"\\r\\n Ni 1.19713\"\r\n    );\r\n  }\r\n}\r\n\r\nclass Material extends BABYLON.MultiMaterial {\r\n  constructor(scene) {\r\n    super(\"multimat\", scene);\r\n  }\r\n\r\n  CreateSubMaterial = (matitem_name, scene) => {\r\n    var mat = new MaterialItem(matitem_name, scene);\r\n    this.subMaterials.push(mat);\r\n  };\r\n\r\n  AddMaterial = (matitem_name, scene) => {\r\n    //  ellenorzes, hogy ne legyen ketto azonos nevu\r\n    for (let i = 0; i < this.subMaterials.length; i++) {\r\n      if (this.subMaterials[i].name == matitem_name) {\r\n        alert(\"van mar ilyen nevu\");\r\n        return;\r\n      }\r\n    }\r\n\r\n    let newMat = new MaterialItem(matitem_name, scene);\r\n    this.subMaterials.push(newMat);\r\n    return newMat;\r\n  };\r\n\r\n  RemoveMaterial = matitem_name => {\r\n    if (matitem_name.length > 0) {\r\n      let index;\r\n      for (let i = 0; i < this.subMaterials.length; i++) {\r\n        if (this.subMaterials[i].name == matitem_name) {\r\n          index = i;\r\n          break;\r\n        }\r\n      }\r\n      this.subMaterials.splice(index, 1);\r\n    } else {\r\n      this.subMaterials.pop();\r\n    }\r\n  };\r\n\r\n  removeAllMaterial = () => {\r\n    for (let i = 0; i < this.subMaterials.length; i++) {\r\n      this.subMaterials.pop();\r\n    }\r\n  };\r\n}\r\nexport default Material;\r\n","import BABYLON from \"babylonjs\";\r\nimport Material from \"./components/Material/Material\";\r\n\r\nexport class MeshObject\r\n{\r\n  constructor()\r\n  {\r\n    this.m_obj = null;\r\n  }\r\n\r\n  switchMesh(babMesh, scene)\r\n  {\r\n\t  if (this.m_obj)\r\n\t  {\r\n\t\t  this.m_obj.dispose();\r\n\t  }\r\n\t\r\n    var material = null;\r\n    if (this.m_obj && this.m_obj.material != null)\r\n    {\r\n      material = this.m_obj.material;\r\n    }\r\n    else\r\n    {\r\n      material = new Material(scene);\r\n      material.CreateSubMaterial(\"default material\", scene);\r\n    }\r\n      \r\n    this.m_obj = babMesh;\r\n\t  this.m_obj.material = material;\r\n  }\r\n\r\n  applynewMaterial = (material, index) => {\r\n    // this.m_obj.material = index;\r\n    // this.m_obj.material = this.m_obj.material[index];\r\n    let tmp = this.m_obj.material.subMaterials[0];\r\n    this.m_obj.material.subMaterials[0] = material;\r\n    this.m_obj.material.subMaterials[index] = tmp;\r\n  };\r\n\r\n  getMaterial = () => {\r\n    console.log(this.m_obj.material);\r\n  };\r\n\r\n  setMaterial = material => {\r\n    console.log(\"setMat\");\r\n    this.m_obj.material.dispose(false, true);\r\n\r\n    // this.m_obj.material = material;\r\n  };\r\n\r\n  remove = () => \r\n  {\r\n    if (this.m_obj)\r\n    {\r\n      this.m_obj.dispose();\r\n      this.m_obj = null;\r\n    }\r\n    // this.m_obj.material.removeAllMaterial();\r\n    // this.m_obj.material = null;\r\n  };\r\n};\r\n\r\nexport class MeshCreator\r\n{\r\n  constructor()\r\n  {\r\n  }\r\n\r\n  static CreateOwnMesh(scene, name=\"nincsnev\", size= new BABYLON.Vector3(8, 8, 8), pos = new BABYLON.Vector3(0, 0, 0))\r\n  {\r\n    return BABYLON.Mesh.CreateBox(name, size, scene);\r\n  }\r\n\r\n  static CreateBox(scene, name=\"nincsnev\", size=8, pos = new BABYLON.Vector3(0, 0, 0))\r\n  {\r\n    return BABYLON.Mesh.CreateBox(name, size, scene);\r\n  }\r\n\r\n  static Create_Cylinder(scene, name=\"nincsnev\", size= new BABYLON.Vector3(8, 8, 8), pos = new BABYLON.Vector3(0, 0, 0), height=7.0, diameterTop=4.0, diameterBottom=8.0, tessellation=100.0)\r\n  {\r\n\t  return BABYLON.Mesh.CreateCylinder(name, height, diameterTop, diameterBottom, tessellation, scene);\r\n  }\r\n\r\n  static CreateTorus(name, thickness, scene)\r\n  {\r\n    return BABYLON.Mesh.CreateTorus(name, 10, thickness, 100, scene);\r\n  }\r\n\r\n  static CreateTorusKnot(name, radius, tube, radialSegments, tubularSegments, p, q, scene)\r\n  {\r\n    return BABYLON.Mesh.CreateTorusKnot(name, radius, tube, radialSegments, tubularSegments, p, q, scene, true, 3);\r\n  }\r\n\r\n  static CreatePolygon(name, tessellation, scene)\r\n  {\r\n    return BABYLON.Mesh.CreateDisc(name, tessellation, scene);\r\n  }\r\n\r\n  static CreateSphere(name, segments, diameter, scene)\r\n  {\r\n    return BABYLON.Mesh.CreateSphere(name, segments, diameter, scene);\r\n  }\r\n}\r\n\r\n","export const exportObj = (material) =>\r\n{\r\n    var output = [];\r\n    \r\n    var m = material;\r\n    output.push(\"newmtl mat1\");\r\n    output.push(\"  Ns \" + m.specularPower.toFixed(4));\r\n    output.push(\"  Ni 1.5000\");\r\n    output.push(\"  d \" + m.alpha);\r\n    output.push(\"  Tr 0.0000\");\r\n    output.push(\"  Tf 1.0000 1.0000 1.0000\");\r\n    output.push(\"  illum 2\");\r\n    output.push(\"  Ka \" + m.ambientColor.r.toFixed(4) + \" \" + m.ambientColor.g.toFixed(4) + \" \" + m.ambientColor.b.toFixed(4));\r\n    output.push(\"  Kd \" + m.diffuseColor.r.toFixed(4) + \" \" + m.diffuseColor.g.toFixed(4) + \" \" + m.diffuseColor.b.toFixed(4));\r\n    output.push(\"  Ks \" + m.specularColor.r.toFixed(4) + \" \" + m.specularColor.g.toFixed(4) + \" \" + m.specularColor.b.toFixed(4));\r\n    output.push(\"  Ke \" + m.emissiveColor.r.toFixed(4) + \" \" + m.emissiveColor.g.toFixed(4) + \" \" + m.emissiveColor.b.toFixed(4));\r\n    //TODO: uv scale, offset, wrap\r\n    //TODO: UV mirrored in Blender? second UV channel? lightMap? reflection textures?\r\n    var uvscale = \"\";\r\n    if (m.ambientTexture) {\r\n        output.push(\"  map_Ka \" + uvscale + m.ambientTexture.name);\r\n    }\r\n    if (m.diffuseTexture) {\r\n        output.push(\"  map_Kd \" + uvscale + m.diffuseTexture.name);\r\n        //TODO: alpha testing, opacity in diffuse texture alpha channel (diffuseTexture.hasAlpha -> map_d)\r\n    }\r\n    if (m.specularTexture) {\r\n        output.push(\"  map_Ks \" + uvscale + m.specularTexture.name);\r\n        /* TODO: glossiness = specular highlight component is in alpha channel of specularTexture. (???)\r\n        if (m.useGlossinessFromSpecularMapAlpha)  {\r\n            output.push(\"  map_Ns \"+uvscale + m.specularTexture.name);\r\n        }\r\n        */\r\n    }\r\n    /* TODO: emissive texture not in .MAT format (???)\r\n    if (m.emissiveTexture) {\r\n        output.push(\"  map_d \"+uvscale+m.emissiveTexture.name);\r\n    }\r\n    */\r\n    if (m.bumpTexture) {\r\n        output.push(\"  map_bump -imfchan z \" + uvscale + m.bumpTexture.name);\r\n    }\r\n    if (m.opacityTexture) {\r\n        output.push(\"  map_d \" + uvscale + m.opacityTexture.name);\r\n    }\r\n    var text = output.join(\"\\n\");\r\n    return (text);\r\n  \r\n};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) \r\n{\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) \r\n  {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) \r\n    {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App.2\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}